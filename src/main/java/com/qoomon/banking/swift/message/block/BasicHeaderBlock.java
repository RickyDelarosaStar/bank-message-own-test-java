package com.qoomon.banking.swift.message.block;

import com.google.common.base.Preconditions;
import com.qoomon.banking.swift.message.block.exception.BlockParseException;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * <b>Fixed Length Format</b>
 * <pre>
 * 1:  1  - Indicates the Application Id - F = FIN (financial application), A = GPA (general purpose application), L = GPA (for logins, and so on)
 * 2:  2  - Indicates the Service Id -  01 = FIN/GPA, 21 = ACK/NAK
 * 3: 12  - Logical terminal (LT) address
 * 4:  4  - Session number - It is generated by the user's computer and is padded with zeros.
 * 5:  6  - Sequence number - It is generated by the user's computer. It is padded with zeros.
 * </pre>
 * <p>
 *     <b>Example</b><br>
 *         F01YOURCODEZABC1234567890
 *
 * @see <a href="https://www.ibm.com/support/knowledgecenter/SSBTEG_4.3.0/com.ibm.wbia_adapters.doc/doc/swift/swift72.htm">https://www.ibm.com/support/knowledgecenter/SSBTEG_4.3.0/com.ibm.wbia_adapters.doc/doc/swift/swift72.htm</a>
 */
public class BasicHeaderBlock {

    public static final String BLOCK_ID_1 = "1";

    public static final Pattern BLOCK_CONTENT_PATTERN = Pattern.compile("(.{1})(.{2})(.{12})(.{4})(.{6})");

    private final String applicationId;
    private final String serviceId;
    private final String logicalTerminalAddress;
    private final String sessionNumber;
    private final String sequenceNumber;


    public BasicHeaderBlock(String applicationId, String serviceId, String logicalTerminalAddress, String sessionNumber, String sequenceNumber) {
        this.applicationId = Preconditions.checkNotNull(applicationId);
        this.serviceId = Preconditions.checkNotNull(serviceId);
        this.logicalTerminalAddress = Preconditions.checkNotNull(logicalTerminalAddress);
        this.sessionNumber = Preconditions.checkNotNull(sessionNumber);
        this.sequenceNumber = Preconditions.checkNotNull(sequenceNumber);
    }

    public static BasicHeaderBlock of(GeneralBlock block) throws BlockParseException {
        Preconditions.checkArgument(block.getId().equals(BLOCK_ID_1), "unexpected block id '" + block.getId() + "'");

        Matcher blockContentMatcher = BLOCK_CONTENT_PATTERN.matcher(block.getContent());
        if (!blockContentMatcher.matches()) {
            throw new BlockParseException("Block '" + block.getId() + "' content did not match format " + BLOCK_CONTENT_PATTERN);
        }
        String applicationId = block.getContent().substring(0, 1);
        String serviceId = block.getContent().substring(1, 3);
        String logicalTerminalAddress = block.getContent().substring(0, 1);
        String sessionNumber = block.getContent().substring(0, 1);
        String sequenceNumber = block.getContent().substring(0, 1);

        return new BasicHeaderBlock(applicationId, serviceId, logicalTerminalAddress, sessionNumber, sequenceNumber);
    }
}
